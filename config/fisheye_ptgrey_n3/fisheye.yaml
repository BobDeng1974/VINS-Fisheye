%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

is_fisheye: 1
imu_topic: "/dji_sdk_1/dji_sdk/imu"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/stereo/left/image_raw"
image1_topic: "/stereo/right/image_raw"
output_path: "/home/xuhao/output"

cam0_calib: "up.yaml"
cam1_calib: "down.yaml"
image_width: 600 # For fisheye, this indicate the flattened image width; min 100; 300 - 500 is good for vins
image_height: 400
show_width: 1920

fisheye_fov: 235

enable_up_top: 1
enable_down_top: 1
enable_up_side: 1
enable_down_side: 1
enable_rear_side: 1
thres_outlier : 5.0
tri_max_err: 3.0
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 9.9962518025136060e-01, -2.7028085413917921e-02,
       -4.3567885297261036e-03, 3.3259587007775364e-02,
       2.6968443162825491e-02, 9.9954897632742379e-01,
       -1.3211623525239644e-02, -5.8150961859713979e-04,
       4.7119084040594932e-03, 1.3089175743994428e-02,
       9.9990323101664924e-01, 5.9227130089820078e-02, 0., 0., 0., 1. ]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 9.9981224379186717e-01, 1.6006130609714612e-02,
       1.0921581697572881e-02, 3.2777616510877204e-02,
       1.5920540849220906e-02, -9.9984221478481472e-01,
       7.8792076546535320e-03, -1.8948081248206037e-03,
       1.1045974060276010e-02, -7.7038507969468912e-03,
       -9.9990931445804554e-01, -5.0164096186569078e-02, 0., 0., 0., 1. ]



# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, 1, 0, 0.0170,
#          0, 0, 1, 0.0662, 
#          0., 0., 0., 1 ]
# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, -1, 0, 0.0170,
#          0, 0, -1, -0.0540, 
#          0., 0., 0., 1 ]

#Multiple thread support
multiple_thread: 1
#Gpu accleration support
use_gpu: 1
use_gpu_acc_flow: 1


depth_estimate_baseline: 0.05
top_cnt: 30
side_cnt: 30
max_solve_cnt: 30 # Max Point for solve; highly influence performace

min_dist: 20            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

sgbm_p1: 300
sgbm_p2: 1200
#optimization parameters
max_solver_time: 0.04 # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
# max_solver_time: 1.0  # max solver itration time (ms), to guarantee real time
# max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.85         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
td: 0.014686 #Use mynteye imu
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/xuhao/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]
