%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

imu_topic: "/dji_sdk_1/dji_sdk/imu"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/flattener/flatImage_2"
image1_topic: "/flattener_2/flatImage_2"
output_path: "/home/xuhao/output"

cam0_calib: "front.yaml"
cam1_calib: "front.yaml"
image_width: 600
image_height: 264
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.


body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 2.6795505461571834e-02, 1.1193585412589413e-03,
       9.9964030927304814e-01, 3.9181524148869780e-02,
       -9.9963984511284587e-01, -1.4473289349150598e-03,
       2.6797113682632268e-02, 1.7017587148436004e-02,
       1.4768039221999540e-03, -9.9999832613630446e-01,
       1.0801734884293701e-03, 6.6196374486799686e-02, 0., 0., 0., 1. ]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 1.6218018513785792e-02, 1.0071883563100681e-02,
       9.9981774991094174e-01, 3.8435431884353360e-02,
       -9.9985510199558325e-01, -5.0091787366128848e-03,
       1.6269085462524147e-02, 1.4435333434365462e-02,
       5.1721261477984393e-03, -9.9993673064343247e-01,
       9.9891852137821147e-03, -5.4031071258251288e-02, 0., 0., 0., 1. ]


# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [0, 0, 1, 0.0392,
#          -1, 0, 0, 0.0170,
#          0, -1, 0, 0.0662, 
#          0., 0., 0., 1 ]

# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [0, 0, 1, 0.0384,
#          -1, 0, 0, 0.0144,
#          0, -1, 0, -0.0540, 
#          0., 0., 0., 1 ]

#Multiple thread support
multiple_thread: 1
#Gpu accleration support
use_gpu: 1
use_gpu_acc_flow: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 20            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.01          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.001         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.0001        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.00001       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.85         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
td: 0.014686 #Use mynteye imu
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/dji/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]
cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]
