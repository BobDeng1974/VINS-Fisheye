// Generated by gencpp from file vins/VIOKeyframe.msg
// DO NOT EDIT!


#ifndef VINS_MESSAGE_VIOKEYFRAME_H
#define VINS_MESSAGE_VIOKEYFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Pose.h>

namespace vins
{
template <class ContainerAllocator>
struct VIOKeyframe_
{
  typedef VIOKeyframe_<ContainerAllocator> Type;

  VIOKeyframe_()
    : header()
    , pose_cam()
    , pose_drone()
    , feature_points_2d_norm()
    , feature_points_2d_uv()
    , feature_points_3d()
    , feature_points_id()
    , feature_points_flag()
    , camera_extrisinc()  {
    }
  VIOKeyframe_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose_cam(_alloc)
    , pose_drone(_alloc)
    , feature_points_2d_norm(_alloc)
    , feature_points_2d_uv(_alloc)
    , feature_points_3d(_alloc)
    , feature_points_id(_alloc)
    , feature_points_flag(_alloc)
    , camera_extrisinc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_cam_type;
  _pose_cam_type pose_cam;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_drone_type;
  _pose_drone_type pose_drone;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _feature_points_2d_norm_type;
  _feature_points_2d_norm_type feature_points_2d_norm;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _feature_points_2d_uv_type;
  _feature_points_2d_uv_type feature_points_2d_uv;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _feature_points_3d_type;
  _feature_points_3d_type feature_points_3d;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _feature_points_id_type;
  _feature_points_id_type feature_points_id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _feature_points_flag_type;
  _feature_points_flag_type feature_points_flag;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_extrisinc_type;
  _camera_extrisinc_type camera_extrisinc;





  typedef boost::shared_ptr< ::vins::VIOKeyframe_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vins::VIOKeyframe_<ContainerAllocator> const> ConstPtr;

}; // struct VIOKeyframe_

typedef ::vins::VIOKeyframe_<std::allocator<void> > VIOKeyframe;

typedef boost::shared_ptr< ::vins::VIOKeyframe > VIOKeyframePtr;
typedef boost::shared_ptr< ::vins::VIOKeyframe const> VIOKeyframeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vins::VIOKeyframe_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vins::VIOKeyframe_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vins

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'vins': ['/home/xuhao/swarm_ws/src/VINS-Fusion-gpu/vins_estimator/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vins::VIOKeyframe_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vins::VIOKeyframe_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vins::VIOKeyframe_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vins::VIOKeyframe_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vins::VIOKeyframe_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vins::VIOKeyframe_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vins::VIOKeyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aaabe0992f4072c6be9689ff92b6093a";
  }

  static const char* value(const ::vins::VIOKeyframe_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaaabe0992f4072c6ULL;
  static const uint64_t static_value2 = 0xbe9689ff92b6093aULL;
};

template<class ContainerAllocator>
struct DataType< ::vins::VIOKeyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vins/VIOKeyframe";
  }

  static const char* value(const ::vins::VIOKeyframe_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vins::VIOKeyframe_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Pose pose_cam # For left camera\n"
"geometry_msgs/Pose pose_drone\n"
"geometry_msgs/Point32[] feature_points_2d_norm\n"
"geometry_msgs/Point32[] feature_points_2d_uv\n"
"geometry_msgs/Point32[] feature_points_3d\n"
"int32[] feature_points_id\n"
"uint8[] feature_points_flag\n"
"\n"
"geometry_msgs/Pose camera_extrisinc\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::vins::VIOKeyframe_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vins::VIOKeyframe_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose_cam);
      stream.next(m.pose_drone);
      stream.next(m.feature_points_2d_norm);
      stream.next(m.feature_points_2d_uv);
      stream.next(m.feature_points_3d);
      stream.next(m.feature_points_id);
      stream.next(m.feature_points_flag);
      stream.next(m.camera_extrisinc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VIOKeyframe_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vins::VIOKeyframe_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vins::VIOKeyframe_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose_cam: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_cam);
    s << indent << "pose_drone: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_drone);
    s << indent << "feature_points_2d_norm[]" << std::endl;
    for (size_t i = 0; i < v.feature_points_2d_norm.size(); ++i)
    {
      s << indent << "  feature_points_2d_norm[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.feature_points_2d_norm[i]);
    }
    s << indent << "feature_points_2d_uv[]" << std::endl;
    for (size_t i = 0; i < v.feature_points_2d_uv.size(); ++i)
    {
      s << indent << "  feature_points_2d_uv[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.feature_points_2d_uv[i]);
    }
    s << indent << "feature_points_3d[]" << std::endl;
    for (size_t i = 0; i < v.feature_points_3d.size(); ++i)
    {
      s << indent << "  feature_points_3d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.feature_points_3d[i]);
    }
    s << indent << "feature_points_id[]" << std::endl;
    for (size_t i = 0; i < v.feature_points_id.size(); ++i)
    {
      s << indent << "  feature_points_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.feature_points_id[i]);
    }
    s << indent << "feature_points_flag[]" << std::endl;
    for (size_t i = 0; i < v.feature_points_flag.size(); ++i)
    {
      s << indent << "  feature_points_flag[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.feature_points_flag[i]);
    }
    s << indent << "camera_extrisinc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_extrisinc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VINS_MESSAGE_VIOKEYFRAME_H
